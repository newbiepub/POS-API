interface ProductInventory {
    _id:String,
    product: Product,
    importPrice: Float
    prices: [ProductPrice]
    quantity: Int,
    description: String
}

type ProductInventoryCompany implements ProductInventory{
    _id:String,
    product: Product,
    importPrice: Float
    prices: [ProductPrice]
    quantity: Int,
    description: String
    companyId: String!
}
type InventoryAmount {
    inventoryAmount: Int,
}
type updateProductInventoryQuantityFragment implements ProductInventory{
    _id:String,
    product: Product,
    importPrice: Float
    prices: [ProductPrice]
    quantity: Int,
    description: String
}
type ProductInventoryEmployee implements ProductInventory{
    _id:String,
    product: Product,
    importPrice: Float
    prices: [ProductPrice]
    quantity: Int,
    description: String
    employeeId: String!
}

interface IngredientInventory {
    ingredient: Ingredient
    quantity: Int,
    description: String
}

type IngredientInventoryCompany implements IngredientInventory{
    ingredient: Ingredient
    quantity: Int,
    description: String
    companyId: String!
}

type IngredientInventoryEmployee implements IngredientInventory{
    ingredient: Ingredient
    quantity: Int,
    description: String
    employeeId: String!
}

#Trader Information
type Trader {
    _id: String
    name: String
    phone: String
    address: String
    email: String
    description: String
}

type InventoryHistoryProduct {
    name: String!
    prices: [ProductPrice]
    importPrice: Float
    unit: String!
    description: String
    category: String
    detail: String
    productCode: String
    quantity: Int
}

# Inventory history
type InventoryHistory {
    _id: String
    products: [InventoryHistoryProduct]
    type: String
    from: Trader
    to: Trader
    totalQuantity: Int
    totalPrice: Float
    dateDelivered: Date
    dateReceived: Date
}

# Product input for sending to server
# POS send product need importing from company
input InventoryRequestPayload {
    _id: String!,
    quantity: Int!,
    type: String!
}

type InventoryActivityLogger {
    message: String!
    data: String
    type: String
    companyId: String
    employeeId: String
    createdAt: Date
}

# Inventory activity

type InventoryActivityProductsDetail {
    _id: String
    name: String
    quantity: Int
}

type InventoryActivityProducts{
    _id: String,
    quantity: Int,
    salePrice: Float,
}
type InventoryActivityActor{
    _id: String,
    name: String,
    phone: String,
    address: String,
    email: String,
    description: String,
}
type InventoryActivity {
    _id: String,
    products:[InventoryActivityProductsDetail],
    totalQuantity: Int,
    totalPrice: Float,
    from:InventoryActivityActor,
    to: InventoryActivityActor,
    status: String,
    type:String,
    dateRequest: Date,
    ingredients: [InventoryActivityProducts],
    paid: Float,
    dateReceived: Date
}