interface ProductInventory {
    _id:String,
    product: Product,
    quantity: Int,
    description: String
}

type ProductInventoryCompany implements ProductInventory{
    _id:String,
    product: Product,
    quantity: Int,
    description: String
    companyId: String!
}
type InventoryAmount {
    inventoryAmount: Int,
}
type updateProductInventoryQuantityFragment implements ProductInventory{
    _id:String,
    product: Product,
    quantity: Int,
    description: String
}
type ProductInventoryEmployee implements ProductInventory{
    _id:String,
    product: Product,
    quantity: Int,
    description: String
    employeeId: String!
}

interface IngredientInventory {
    ingredient: Ingredient
    quantity: Int,
    description: String
}

type IngredientInventoryCompany implements IngredientInventory{
    ingredient: Ingredient
    quantity: Int,
    description: String
    companyId: String!
}

type IngredientInventoryEmployee implements IngredientInventory{
    ingredient: Ingredient
    quantity: Int,
    description: String
    employeeId: String!
}

#Trader Information
type Trader {
    _id: String
    name: String
    phone: String
    address: String
    email: String
    description: String
}

type InventoryHistoryProduct {
    _id: String!
    name: String!
    price: [ProductPrice]
    unit: String!
    description: String
    categoryId: Category
    detail: String
    companyId: User
    productCode: String
    quantity: Int
}

# Inventory history
type InventoryHistory {
    _id: String
    products: [InventoryHistoryProduct]
    type: String
    from: Trader
    to: Trader
    totalQuantity: Int
    totalPrice: Int
    dateDelivered: Date
    dateReceived: Date
}

# Product input for sending to server
# POS send product need importing from company
input InventoryRequestPayload {
    _id: String!,
    quantity: Int!,
    type: String!
}