#Root Query
type Query {
    currentUser: User,
    products(limit: Int, skip: Int): [Product]
    categories(limit: Int, skip: Int): [Category]
    getUserProductInventory(type: String!, userId: String!, limit: Int, skip: Int): [ProductInventory]
    getUserIngredientInventory(type: String!, userId: String!, limit: Int, skip: Int): [IngredientInventory]
    getAmountUserProductInventory(type:String!,userId:String!):InventoryAmount
    getAllPOS: [User]
    paymentStatus: [PaymentStatus]
    paymentMethod:[PaymentMethod]
    getTransactionEmployee(limit:Int,skip:Int):[Transaction]
    getAmountTransactionEmployee: TransactionAmount
    currency(type:String!):[Currency]
    getUserInventoryHistory(type: String!): [InventoryHistory]
    FETCH_ALL_DISCOUNT: [Discount]
}

# Mutation Response Type
type Response {
    success: Boolean
}

#Root Mutation
type Mutation {
    addNewPOS(username: String!, password: String!, name: String!, address: String!, phoneNumber: String!): User
    # Product
    UPDATE_PRODUCT(productId: String!):Response
    # Inventory
    # Inventory - POS request to Company
    requestPOSToCompany (employeeId: String!, products: [ProductExport]!, confirmOption: Boolean): Response

    # Discount
    CREATE_DISCOUNT (products: [String]!, employeeIds: [String]!,
        appliedDate: Date, dueDate: Date,name: String!,
        description: String, type: String!, value: Float!): Discount

    # Transaction
    createTransaction(productItems:[TransactionProductItemsInput]!,
        type:String!,
        paymentStatus:PaymentStatusInput!,
        paymentMethod:PaymentMethodInput!,
        date:Date,
        createdAt: Date,
        dueDate:Date,
        totalQuantity:Int!,
        totalPrice:Float!,
        paid:[TransactionPaidInput]!,
        customer:TransactionCustomerInput,
        description:String,
        issueRefund: Boolean,
        issueRefundReason: String,
        refundDate:Date,
    ):Transaction,
    updateTransaction(_id: String!, dueDate:Date,paid:TransactionPaidInput!,description:String):Transaction,
    issueRefundTransaction(_id:String!,issueRefundReason: String!,refundDate:Date,productItems:[TransactionProductItemsInput]!):Transaction,
    sendMailInvoice( transaction: TransactionInput!,email: String!) : Boolean
}