#Root Query
type Query {
    currentUser: User,
    products(limit: Int, skip: Int): [Product]
    categories(limit: Int, skip: Int): [Category]
    getUserProductInventory(type: String!, userId: String!, limit: Int, skip: Int): [ProductInventory]
    getUserIngredientInventory(type: String!, userId: String!, limit: Int, skip: Int): [IngredientInventory]
    getAmountUserProductInventory(type:String!,userId:String!):InventoryAmount
    getAllPOS: [User]
    paymentStatus: [PaymentStatus]
    paymentMethod:[PaymentMethod]
    getTransactionEmployee(limit:Int,skip:Int):[Transaction]
    getAmountTransactionEmployee: TransactionAmount
    currency(type:String!):[Currency]
    getUserInventoryHistory(type: String!): [InventoryHistory]
}

# Mutation Response Type
type Response {
    success: Boolean
}

#Root Mutation
type Mutation {
    addNewPOS(username: String!, password: String!, name: String!, address: String!, phoneNumber: String!): User
    addNewProduct (name: String!, price: [ProductPriceInput]!, unit: String!, description: String, categoryId: String!, productCode: String, quantity: Int): ProductInventory
    updateProduct (_id: String! ,name: String!, price: [ProductPriceInput]!, unit: String!, description: String, categoryId: String!, productCode: String, quantity: Int): ProductInventory
    deleteProduct (_id: String!): Response
    addNewIngredient (name: String!, description: String, price: Float!, unit: String!, quantity: Int): IngredientInventory
    updateIngredient(_id: String!, name: String!, description: String, price: Float!, unit: String!, quantity: Int): IngredientInventory,
    # Inventory
    # Inventory - POS request to Company
    requestPOSToCompany (data: [InventoryRequestPayload]!): Response
    # Inventory - Company Accept Request and export to POS
    #companyAcceptRequestFromPOS()
    # Invnetory - POS receive products and confirm then products will be imported to POS and exported from company
    #POSConfirmImportFromCompany()
    createTransaction(productItems:[TransactionProductItemsInput]!,
        type:String!,
        paymentStatus:PaymentStatusInput!,
        paymentMethod:PaymentMethodInput!,
        date:Date,
        createdAt: Date,
        dueDate:Date,
        totalQuantity:Int!,
        totalPrice:Float!,
        paid:TransactionPaidInput!,
        customer:TransactionCustomerInput,
        description:String,
        issueRefund: Boolean,
        issueRefundReason: String,
    ):Transaction,
    updateTransaction(_id: String!, dueDate:Date,paid:TransactionPaidInput!,description:String):Transaction,
    issueRefundTransaction(_id:String!,issueRefundReason: String!,refundDate:Date,productItems:[TransactionProductItemsInput]!):Transaction,
}